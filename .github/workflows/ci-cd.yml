name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'featre/**' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          python -m pip install -r requirements.txt
          python -m pip install dvc[all] mlflow

      - name: Run Tests
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest tests/ --cov=src --cov-report=term-missing -v

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Setup DVC
        run: |
          rm -rf .dvc data/housing.csv
          dvc init --no-scm
          dvc config core.no_scm true
          dvc config core.analytics false
          dvc config core.autostage true
          
      - name: Run DVC Pipeline
        run: |
          # Ensure directories exist
          mkdir -p data
          # Run DVC pipeline with clean state
          dvc repro -v --force --no-commit
          # Check DVC status
          dvc status

      - name: Validate Model
        run: |
          python src/validate.py

      - name: Upload Model Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: models/best_model.pkl
          retention-days: 5

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [[ -n "$DOCKER_USERNAME" && -n "$DOCKER_PASSWORD" ]]; then
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker build -t "$DOCKER_USERNAME/housing-api:latest" .
            docker push "$DOCKER_USERNAME/housing-api:latest"
            docker logout
          else
            echo "Skipping Docker push - credentials not configured"
          fi
